
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'B7DA2FE6C22431AB95D14A63E4FE0078'
    
_lr_action_items = {'IMPORT':([2,],[9,]),'ID':([5,9,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[10,11,12,-26,-28,-27,19,12,-9,12,12,12,34,39,34,12,12,-8,12,-21,-30,12,12,-17,-11,48,34,-15,12,-13,34,12,12,-20,-29,-25,-24,-18,56,-10,-14,-12,-23,-22,-19,-16,]),'$end':([1,3,4,6,7,8,18,28,],[-1,0,-4,-5,-3,-2,-6,-7,]),'OP_MUL':([15,],[21,]),'INPUT':([15,],[22,]),'OP_DIV':([15,],[20,]),'STRING':([10,12,13,14,16,17,19,20,21,25,26,27,29,30,31,32,33,35,39,40,42,43,44,45,46,47,50,53,54,55,57,],[13,-26,-28,-27,13,-9,13,13,13,13,13,-8,13,-21,-30,13,13,-11,13,-13,13,13,-20,-29,-25,-24,-10,-12,-23,-22,-19,]),'NUMBER':([10,12,13,14,16,17,19,20,21,25,26,27,29,30,31,32,33,35,39,40,42,43,44,45,46,47,50,53,54,55,57,],[14,-26,-28,-27,14,-9,14,14,14,14,14,-8,14,-21,-30,14,14,-11,14,-13,14,14,-20,-29,-25,-24,-10,-12,-23,-22,-19,]),'LBRACE':([0,1,4,6,7,8,18,28,],[5,5,-4,-5,-3,-2,-6,-7,]),'RPAREN':([11,12,13,14,19,22,24,29,30,31,32,33,34,35,37,38,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[18,-26,-28,-27,30,35,40,44,-21,-30,46,47,-17,-11,50,-15,-13,53,54,55,-20,-29,-25,-24,-10,-14,57,-12,-23,-22,58,-19,-16,]),'LPAREN':([0,1,4,6,7,8,10,12,13,14,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,50,51,53,54,55,57,58,],[2,2,-4,-5,-3,-2,15,-26,-28,-27,15,-9,-6,15,15,15,36,36,15,15,-8,-7,15,-21,-30,15,15,-17,-11,36,-15,15,-13,36,15,15,-20,-29,-25,-24,-10,-14,-12,-23,-22,-19,-16,]),'ASSIGN':([15,],[23,]),'OUTPUT':([15,],[24,]),'OP_SUB':([15,],[25,]),'RBRACE':([12,13,14,16,17,27,30,35,40,44,46,47,50,53,54,55,57,],[-26,-28,-27,28,-9,-8,-21,-11,-13,-20,-25,-24,-10,-12,-23,-22,-19,]),'OP_ADD':([15,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_list':([19,20,21,25,26,],[29,32,33,42,43,]),'statement_list':([0,],[1,]),'program':([0,],[3,]),'type':([36,],[49,]),'expression_list':([10,],[16,]),'expression':([10,16,19,20,21,25,26,29,32,33,39,42,43,],[17,27,31,31,31,31,31,45,45,45,52,45,45,]),'declaration_list':([22,24,],[37,41,]),'import_statement':([0,1,],[4,7,]),'declaration':([22,24,37,41,],[38,38,51,51,]),'component':([0,1,],[6,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',12),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',14),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',15),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',44),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',45),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',52),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',53),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',60),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',61),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',70),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',71),
  ('type -> ID','type',1,'p_type','parser.py',79),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',83),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_parameter_list','parser.py',87),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_parameter_list','parser.py',88),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',96),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',99),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',102),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',105),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',109),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',113),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',117),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',121),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',122),
]
