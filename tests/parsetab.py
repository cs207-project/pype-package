
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'ID':([6,7,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[10,11,12,-26,19,-27,-28,12,-9,12,12,35,12,35,12,42,12,-8,12,-21,-30,12,35,49,-17,-15,-13,12,35,-11,12,12,12,-20,-29,-23,-14,-12,-18,56,-25,-10,-24,-22,-19,-16,]),'OP_SUB':([13,],[20,]),'LPAREN':([0,1,3,4,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,55,57,58,],[2,-5,2,-4,-2,-3,13,-26,-27,-28,13,-9,-6,13,13,34,13,34,13,13,-7,-8,13,-21,-30,13,34,-17,-15,-13,13,34,-11,13,13,13,-20,-29,-23,-14,-12,-25,-10,-24,-22,-19,-16,]),'$end':([1,3,4,5,8,9,18,27,],[-5,-1,-4,0,-2,-3,-6,-7,]),'OUTPUT':([13,],[21,]),'RBRACE':([12,14,15,16,17,28,30,37,40,44,46,48,51,52,53,55,57,],[-26,-27,-28,27,-9,-8,-21,-13,-11,-20,-23,-12,-25,-10,-24,-22,-19,]),'RPAREN':([11,12,14,15,19,21,23,29,30,31,32,33,35,36,37,38,39,40,41,43,44,45,46,47,48,51,52,53,54,55,56,57,58,],[18,-26,-27,-28,30,37,40,44,-21,-30,46,48,-17,-15,-13,51,52,-11,53,55,-20,-29,-23,-14,-12,-25,-10,-24,57,-22,58,-19,-16,]),'INPUT':([13,],[23,]),'OP_DIV':([13,],[22,]),'IMPORT':([2,],[7,]),'STRING':([10,12,14,15,16,17,19,20,22,24,26,28,29,30,31,32,37,38,40,41,42,43,44,45,46,48,51,52,53,55,57,],[15,-26,-27,-28,15,-9,15,15,15,15,15,-8,15,-21,-30,15,-13,15,-11,15,15,15,-20,-29,-23,-12,-25,-10,-24,-22,-19,]),'OP_MUL':([13,],[24,]),'ASSIGN':([13,],[25,]),'LBRACE':([0,1,3,4,8,9,18,27,],[6,-5,6,-4,-2,-3,-6,-7,]),'OP_ADD':([13,],[26,]),'NUMBER':([10,12,14,15,16,17,19,20,22,24,26,28,29,30,31,32,37,38,40,41,42,43,44,45,46,48,51,52,53,55,57,],[14,-26,-27,-28,14,-9,14,14,14,14,14,-8,14,-21,-30,14,-13,14,-11,14,14,14,-20,-29,-23,-12,-25,-10,-24,-22,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([10,16,19,20,22,24,26,29,32,38,41,42,43,],[17,28,31,31,31,31,31,45,45,45,45,54,45,]),'declaration_list':([21,23,],[33,39,]),'statement_list':([0,],[3,]),'parameter_list':([19,20,22,24,26,],[29,32,38,41,43,]),'program':([0,],[5,]),'import_statement':([0,3,],[4,9,]),'expression_list':([10,],[16,]),'declaration':([21,23,33,39,],[36,36,47,47,]),'component':([0,3,],[1,8,]),'type':([34,],[50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',27),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',31),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',35),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',36),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',45),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',46),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',53),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',54),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',61),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',62),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',71),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',72),
  ('type -> ID','type',1,'p_type','parser.py',80),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',84),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_parameter_list','parser.py',88),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_parameter_list','parser.py',89),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_expression_add','parser.py',97),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_expression_sub','parser.py',101),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_expression_mul','parser.py',105),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_expression_div','parser.py',109),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',113),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',117),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',121),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',125),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',126),
]
